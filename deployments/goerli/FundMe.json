{
  "address": "0x9abc76310412B0c0D6d93b3c5a9521140e187bDC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5eb19bb2c41a8316fcaa279af34e0b927dfcb3244fb02b4a6990bb4633f362de",
  "receipt": {
    "to": null,
    "from": "0x06Dcd2E3EEB88fAf3e907a31a9e1668a51231b10",
    "contractAddress": "0x9abc76310412B0c0D6d93b3c5a9521140e187bDC",
    "transactionIndex": 42,
    "gasUsed": "1052130",
    "logsBloom": "0x
    "blockHash": "0x935fa0fdc5715566c90bc4ecab44003d94ffa8d476d92e227b28953aed65c069",
    "transactionHash": "0x5eb19bb2c41a8316fcaa279af34e0b927dfcb3244fb02b4a6990bb4633f362de",
    "logs": [],
    "blockNumber": 8493734,
    "cumulativeGasUsed": "8382217",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 3,
  "solcInputHash": "782ca5ae2eb520c572eedc812f5ef45a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Bo Wu\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n//error Codes\\nerror FundMe__NotOwner();\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Bo Wu\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declaratioins\\n    using PriceConverter for uint256;\\n\\n    // State Variables!\\n    mapping(address => uint256) public s_addressToAmountFunded;\\n    address[] private s_funders;\\n    address private immutable i_owner;\\n    uint256 public constant minimumUsd = 50 * 1e18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner, \\\"Sender is not owner!\\\");\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    /*\\n    functions order:\\n    constructor\\n    receive\\n    fallback\\n    external\\n    public\\n    internal\\n    private\\n    view / pure\\n\\n    */\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This implements price\\n     */\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) > minimumUsd,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    // function withdraw(){}\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xb31c2f237e88c7523e9b25db1aab08e125af0785053c1c6a91b28ab0580bf047\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // ABI\\n        // Address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        // 3000\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x0d1e6e7332a242189309c3ad2d3b06046ed1e3b33ccb91b1878ebfbaf66030d2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200133038038062001330833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111aa620001866000396000818161025d0152818161049f01528181610628015261081e01526111aa6000f3fe6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101475780639e87a5cd14610172578063b60d42881461019d578063be2693f0146101a7578063d7b4750c146101b157610086565b80630343fb251461008b578063098de820146100c85780631bf6132d146100f35780633ccfd60b14610130575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610ae2565b6101ee565b6040516100bf9190610b28565b60405180910390f35b3480156100d457600080fd5b506100dd610236565b6040516100ea9190610b28565b60405180910390f35b3480156100ff57600080fd5b5061011a60048036038101906101159190610ae2565b610243565b6040516101279190610b28565b60405180910390f35b34801561013c57600080fd5b5061014561025b565b005b34801561015357600080fd5b5061015c61049b565b6040516101699190610b52565b60405180910390f35b34801561017e57600080fd5b506101876104c3565b6040516101949190610bcc565b60405180910390f35b6101a56104ed565b005b6101af610626565b005b3480156101bd57600080fd5b506101d860048036038101906101d39190610c13565b6108b4565b6040516101e59190610b52565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b60006020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102e0576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561038b5760006001828154811061030657610305610c40565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061038390610c9e565b9150506102e3565b50600067ffffffffffffffff8111156103a7576103a6610ce7565b5b6040519080825280602002602001820160405280156103d55781602001602082028036833780820191505090505b50600190805190602001906103eb9291906109d8565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161041290610d47565b60006040518083038185875af1925050503d806000811461044f576040519150601f19603f3d011682016040523d82523d6000602084013e610454565b606091505b5050905080610498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048f90610db9565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061052c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108fc90919063ffffffff16565b1161056c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056390610e25565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461061d9190610e45565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ab576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561072f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e5575b5050505050905060005b81518110156107b957600082828151811061075757610756610c40565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107b190610c9e565b915050610739565b50600067ffffffffffffffff8111156107d5576107d4610ce7565b5b6040519080825280602002602001820160405280156108035781602001602082028036833780820191505090505b50600190805190602001906108199291906109d8565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161086090610d47565b60006040518083038185875af1925050503d806000811461089d576040519150601f19603f3d011682016040523d82523d6000602084013e6108a2565b606091505b50509050806108b057600080fd5b5050565b6000600182815481106108ca576108c9610c40565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061090883610938565b90506000670de0b6b3a764000085836109219190610e9b565b61092b9190610f24565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561098157600080fd5b505afa158015610995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b99190610fe2565b5050509150506402540be400816109d0919061105d565b915050919050565b828054828255906000526020600020908101928215610a51579160200282015b82811115610a505782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109f8565b5b509050610a5e9190610a62565b5090565b5b80821115610a7b576000816000905550600101610a63565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aaf82610a84565b9050919050565b610abf81610aa4565b8114610aca57600080fd5b50565b600081359050610adc81610ab6565b92915050565b600060208284031215610af857610af7610a7f565b5b6000610b0684828501610acd565b91505092915050565b6000819050919050565b610b2281610b0f565b82525050565b6000602082019050610b3d6000830184610b19565b92915050565b610b4c81610aa4565b82525050565b6000602082019050610b676000830184610b43565b92915050565b6000819050919050565b6000610b92610b8d610b8884610a84565b610b6d565b610a84565b9050919050565b6000610ba482610b77565b9050919050565b6000610bb682610b99565b9050919050565b610bc681610bab565b82525050565b6000602082019050610be16000830184610bbd565b92915050565b610bf081610b0f565b8114610bfb57600080fd5b50565b600081359050610c0d81610be7565b92915050565b600060208284031215610c2957610c28610a7f565b5b6000610c3784828501610bfe565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ca982610b0f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cdc57610cdb610c6f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d31600083610d16565b9150610d3c82610d21565b600082019050919050565b6000610d5282610d24565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610da3600b83610d5c565b9150610dae82610d6d565b602082019050919050565b60006020820190508181036000830152610dd281610d96565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e0f601b83610d5c565b9150610e1a82610dd9565b602082019050919050565b60006020820190508181036000830152610e3e81610e02565b9050919050565b6000610e5082610b0f565b9150610e5b83610b0f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e9057610e8f610c6f565b5b828201905092915050565b6000610ea682610b0f565b9150610eb183610b0f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eea57610ee9610c6f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f2f82610b0f565b9150610f3a83610b0f565b925082610f4a57610f49610ef5565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7481610f55565b8114610f7f57600080fd5b50565b600081519050610f9181610f6b565b92915050565b6000819050919050565b610faa81610f97565b8114610fb557600080fd5b50565b600081519050610fc781610fa1565b92915050565b600081519050610fdc81610be7565b92915050565b600080600080600060a08688031215610ffe57610ffd610a7f565b5b600061100c88828901610f82565b955050602061101d88828901610fb8565b945050604061102e88828901610fcd565b935050606061103f88828901610fcd565b925050608061105088828901610f82565b9150509295509295909350565b600061106882610f97565b915061107383610f97565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110b2576110b1610c6f565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110ef576110ee610c6f565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561112c5761112b610c6f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561116957611168610c6f565b5b82820290509291505056fea2646970667358221220115fc56b8b7b287bf1a96ac306169057ec3bbd5202926f8307c2d87fbe8a5c4864736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101475780639e87a5cd14610172578063b60d42881461019d578063be2693f0146101a7578063d7b4750c146101b157610086565b80630343fb251461008b578063098de820146100c85780631bf6132d146100f35780633ccfd60b14610130575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610ae2565b6101ee565b6040516100bf9190610b28565b60405180910390f35b3480156100d457600080fd5b506100dd610236565b6040516100ea9190610b28565b60405180910390f35b3480156100ff57600080fd5b5061011a60048036038101906101159190610ae2565b610243565b6040516101279190610b28565b60405180910390f35b34801561013c57600080fd5b5061014561025b565b005b34801561015357600080fd5b5061015c61049b565b6040516101699190610b52565b60405180910390f35b34801561017e57600080fd5b506101876104c3565b6040516101949190610bcc565b60405180910390f35b6101a56104ed565b005b6101af610626565b005b3480156101bd57600080fd5b506101d860048036038101906101d39190610c13565b6108b4565b6040516101e59190610b52565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b60006020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102e0576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561038b5760006001828154811061030657610305610c40565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061038390610c9e565b9150506102e3565b50600067ffffffffffffffff8111156103a7576103a6610ce7565b5b6040519080825280602002602001820160405280156103d55781602001602082028036833780820191505090505b50600190805190602001906103eb9291906109d8565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161041290610d47565b60006040518083038185875af1925050503d806000811461044f576040519150601f19603f3d011682016040523d82523d6000602084013e610454565b606091505b5050905080610498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048f90610db9565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000061052c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108fc90919063ffffffff16565b1161056c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056390610e25565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461061d9190610e45565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ab576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561072f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e5575b5050505050905060005b81518110156107b957600082828151811061075757610756610c40565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107b190610c9e565b915050610739565b50600067ffffffffffffffff8111156107d5576107d4610ce7565b5b6040519080825280602002602001820160405280156108035781602001602082028036833780820191505090505b50600190805190602001906108199291906109d8565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161086090610d47565b60006040518083038185875af1925050503d806000811461089d576040519150601f19603f3d011682016040523d82523d6000602084013e6108a2565b606091505b50509050806108b057600080fd5b5050565b6000600182815481106108ca576108c9610c40565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061090883610938565b90506000670de0b6b3a764000085836109219190610e9b565b61092b9190610f24565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561098157600080fd5b505afa158015610995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b99190610fe2565b5050509150506402540be400816109d0919061105d565b915050919050565b828054828255906000526020600020908101928215610a51579160200282015b82811115610a505782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109f8565b5b509050610a5e9190610a62565b5090565b5b80821115610a7b576000816000905550600101610a63565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aaf82610a84565b9050919050565b610abf81610aa4565b8114610aca57600080fd5b50565b600081359050610adc81610ab6565b92915050565b600060208284031215610af857610af7610a7f565b5b6000610b0684828501610acd565b91505092915050565b6000819050919050565b610b2281610b0f565b82525050565b6000602082019050610b3d6000830184610b19565b92915050565b610b4c81610aa4565b82525050565b6000602082019050610b676000830184610b43565b92915050565b6000819050919050565b6000610b92610b8d610b8884610a84565b610b6d565b610a84565b9050919050565b6000610ba482610b77565b9050919050565b6000610bb682610b99565b9050919050565b610bc681610bab565b82525050565b6000602082019050610be16000830184610bbd565b92915050565b610bf081610b0f565b8114610bfb57600080fd5b50565b600081359050610c0d81610be7565b92915050565b600060208284031215610c2957610c28610a7f565b5b6000610c3784828501610bfe565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ca982610b0f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cdc57610cdb610c6f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d31600083610d16565b9150610d3c82610d21565b600082019050919050565b6000610d5282610d24565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610da3600b83610d5c565b9150610dae82610d6d565b602082019050919050565b60006020820190508181036000830152610dd281610d96565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e0f601b83610d5c565b9150610e1a82610dd9565b602082019050919050565b60006020820190508181036000830152610e3e81610e02565b9050919050565b6000610e5082610b0f565b9150610e5b83610b0f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e9057610e8f610c6f565b5b828201905092915050565b6000610ea682610b0f565b9150610eb183610b0f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eea57610ee9610c6f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f2f82610b0f565b9150610f3a83610b0f565b925082610f4a57610f49610ef5565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7481610f55565b8114610f7f57600080fd5b50565b600081519050610f9181610f6b565b92915050565b6000819050919050565b610faa81610f97565b8114610fb557600080fd5b50565b600081519050610fc781610fa1565b92915050565b600081519050610fdc81610be7565b92915050565b600080600080600060a08688031215610ffe57610ffd610a7f565b5b600061100c88828901610f82565b955050602061101d88828901610fb8565b945050604061102e88828901610fcd565b935050606061103f88828901610fcd565b925050608061105088828901610f82565b9150509295509295909350565b600061106882610f97565b915061107383610f97565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110b2576110b1610c6f565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110ef576110ee610c6f565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561112c5761112b610c6f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561116957611168610c6f565b5b82820290509291505056fea2646970667358221220115fc56b8b7b287bf1a96ac306169057ec3bbd5202926f8307c2d87fbe8a5c4864736f6c63430008080033",
  "devdoc": {
    "author": "Bo Wu",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}